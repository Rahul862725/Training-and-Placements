<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Placements</title>
  <link rel="icon" type="image/x-icon" href="/img/favicon-16x16.png" />

  <link href="https://fonts.googleapis.com/css?family=Poppins" rel="stylesheet" />
  {{!--
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"> --}}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    * {
      box-sizing: border-box;
      padding: 0;
      margin: 0;
    }

    body {
      font-family: "Poppins";
    }

    #header {
      position: sticky;
      top: 0;
    }
  </style>
</head>

<body>
  <div>{{>header}}</div>
  <br /><br /><br /><br /><br /><br />

  {{!-- Write code here. --}}
  <div>
    <div class="bg-[#002A51] text-white flex flex-col justify-center items-start h-[224px] px-4 lg:px-[11%] py-[48px]">
      <div class="text-center space-y-3">
        <h6 class="font2 text-5xl sm:text-7xl text-center font-extrabold">Placements</h6>
      </div>
    </div>
    <nav class="flex px-4 lg:px-[11%] bg-gray-200 py-[8px] text-black" aria-label="Breadcrumb">
      <ol class="inline-flex items-center">
        <li class="inline-flex items-center">
          <a href="" class="inline-flex items-center text-sm font-medium hover:text-gray-900">
          </a><a href="{{URL}}" class="text-lg font-medium ml-2">TPO</a>

        </li>
        <li aria-current="page">
          <div class="inline-flex items-center">
            <i style="color: rgb(128, 128, 128); font-size: 12px; margin-left: 12px"
              class="fa-solid fa-angle-right ml-2"></i>
            <a href="{{URL}}/index_placements" class="text-lg font-medium ml-2">Placements</a>
          </div>
        </li>
      </ol>
    </nav>
  </div>

  <div class="grid grid-cols-2 m-[5%] lg:grid-cols-4 gap-8 max-w-4xl lg:mx-auto">
    <div
      class="group transition delay-100 duration-300 hover:shadow-2xl hover:bg-sky-400 hover:shadow-sky-500 hover:scale-110 flex flex-col space-y-4 items-center justify-center w-full h-full px-3 py-5 bg-white shadow shadow-gray-400 rounded-xl"
      onclick="insightClick()" id="insight">
      <div class="flex flex-col space-y-4 items-center justify-center">
        <span class="group-hover:text-white group-hover:animate-bounce animate-delay material-symbols-outlined"
          style="font-size: 48px">
          insights</span>
        <p class="group-hover:text-white text-lg lg:text-xl whitespace-nowrap text-center text-dark-purple uppercase">
          Insights
        </p>
      </div>
    </div>
    <div
      class="group transition delay-100 duration-300 hover:shadow-2xl hover:bg-sky-400 hover:shadow-sky-500 hover:scale-110 flex flex-col space-y-4 items-center justify-center w-full h-full px-3 py-5 bg-white shadow shadow-gray-400 rounded-xl"
      onclick="statsClick()">
      <div class="flex flex-col space-y-4 items-center justify-center">
        <span class="group-hover:text-white group-hover:animate-bounce animate-delay material-symbols-outlined"
          style="font-size: 48px">
          bar_chart
        </span>
        <p class="group-hover:text-white text-lg lg:text-xl whitespace-nowrap text-center text-dark-purple uppercase">
          Stats
        </p>
      </div>
    </div>
    <div
      class="group transition delay-100 duration-300 hover:shadow-2xl hover:bg-sky-400 hover:shadow-sky-500 hover:scale-110 flex flex-col space-y-4 items-center justify-center w-full h-full px-3 py-5 bg-white shadow shadow-gray-400 rounded-xl"
      onclick="processClick()">
      <div class="flex flex-col space-y-4 items-center justify-center">
        <span class="group-hover:text-white group-hover:animate-bounce animate-delay material-symbols-outlined"
          style="font-size: 48px">
          call_to_action
        </span>
        <p class="group-hover:text-white text-lg lg:text-xl whitespace-nowrap text-center text-dark-purple uppercase">
          Process
        </p>
      </div>
    </div>

    <div
      class="group transition delay-100 duration-300 hover:shadow-2xl hover:bg-sky-400 hover:shadow-sky-500 hover:scale-110 flex flex-col space-y-4 items-center justify-center w-full h-full px-3 py-5 bg-white shadow shadow-gray-400 rounded-xl"
      onclick="policyClick()">
      <div class="flex flex-col space-y-4 items-center justify-center">
        <span class="group-hover:text-white group-hover:animate-bounce animate-delay material-symbols-outlined"
          style="font-size: 48px">
          policy
        </span>
        <p id="come_here"
          class="group-hover:text-white text-lg lg:text-xl whitespace-nowrap text-center text-dark-purple uppercase">
          Policy
        </p>
      </div>
    </div>
  </div>

  {{!-- to fill content --}}
  <div id="content"></div>
  <br />

  <div>{{>footer}}</div>
</body>
<script>

  document.getElementById("insight").click();
  const content = document.getElementById("content");

  function processClick() {
    let pro_link = `{{URL}}/Placement/process`;
    fetch(pro_link)
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        for (let i = 0; i < data.length; i++) {
          if (data[i].PProcess != null) {
            content.innerHTML = data[i].PProcess; break;
          }
        }
      });

    document.getElementById("come_here").scrollIntoView({ behavior: 'smooth' });
  }

  function policyClick() {
    const p_link = `{{URL}}/Placement/policy`;
    fetch(p_link)
      .then((response) => response.json())
      .then((data) => {
        for (let i = 0; i < data.length; i++) {
          if (data[i].PPolicy != null) { content.innerHTML = data[i].PPolicy; break; }
        }
      });
    document.getElementById("come_here").scrollIntoView({ behavior: 'smooth' });
  }

  function insightClick() {
    const link = `{{URL}}/Placement/insight`;
    fetch(link)
      .then((response) => response.json())
      .then(async (data) => {

        content.innerHTML = "";
        let str1 = `<div class="grid grid-cols-1 m-[5%] lg:grid-cols-2 gap-8 max-w-5xl lg:mx-auto">`;
        let str2 = "";

        let cnt = 0;

        for (let i = 0; i < data.length; i++) {
          var student = data[i];

          if (student.FTE) {
            str2 += `
            <div class="w-full max-w-md bg-white border border-gray-200 rounded-lg shadow shadow-sky-500 px-3 py-5">
                <div class="flex flex-col items-center space-y-2">
                    <h5 class="mb-1 font2 text-xl font-bold text-black">${student.Name}</h5>
                    <span class="font2 text-sm text-black">${student.Branch}</span>
                    <span class="font2 text-sm text-black">${student.Course}</span>
                    <div class="flex flex-col lg:flex-row items-center w-[80%] justify-between">
                        <span class="text-xl font2 font-bold text-sky-500">${student.Package} LPA</span>
                        <span class="text-xl font2 font-bold max-w-[70%] text-sky-500">${student.Company}</span>
                    </div>
                </div>
            </div>
            `;
            cnt++;
          }

          if (cnt == 16) break;
        }

        let str3 = `</div>`;
        content.innerHTML = str1 + str2 + str3;


      });
  }

  function statsClick() {
    const link = `{{URL}}/Internship/insight`;
    fetch(link)
      .then((response) => response.json())
      .then((data) => {
        console.log(data);

        content.innerHTML = "";
        let str1 = `
          <div>
          <div class="flex justify-center items-center">
            <div class="h-fit my-20 space-y-20">
              <div class="max-w-[72vw]">
                <h6 class="text-6xl text-center font-bold">Placements Stats</h6>
              </div>`;

        let str2 = `
          <div class="flex items-center justify-center">
            <canvas
              id="barChart"
              style="width: 700px; max-width: 800px"
              class="bg-gradient-to-b from-[#ffe9ec] via-white to-[#e2effa] p-5 rounded-lg shadow-lg"
            ></canvas>
          </div>
          `;

        let str3 = `
              </div>
            </div>
          </div>`;

        content.innerHTML += str1 + str2 + str3;

        var script = document.createElement("script");

        let currentData = {};

        for (let i = 0; i < data.length; i++) {
          let student = data[i];
          let studentBatch = student.Batch.trim().split("-")[1];
          let key = student.Company;

          if (!currentData[key]) {
            currentData[key] = {};
            currentData[key]['currentYear'] = 0;
            currentData[key]['previousYear'] = 0;
          }

          // checking if it is currentYear

          let currYear = new Date().getFullYear().toString();
          if (Number(studentBatch) === Number(currYear)) {


            currentData[key]['currentYear'] += 1;
          }
          if (Number(studentBatch) === Number(currYear) - 1) {
            currentData[key]['previousYear'] += 1;
          }
        }

        let userData = [];
        let companies = [];
        let currentYearPlacements = [];
        let previousYearPlacements = [];
        let count = 10;

        for (let k in currentData) {
          let obj = {};
          obj.companies = k;
          obj.currentYearPlacements = currentData[k]['currentYear'];
          obj.previousYearPlacements = currentData[k]['previousYear'];
          userData.push(obj);
        }

        userData.sort((a, b) => (a.currentYearPlacements < b.currentYearPlacements) ? 1 : ((b.currentYearPlacements < a.currentYearPlacements) ? -1 : 0))

        userData = userData.slice(0, count);
        console.log(userData);

        for (let i = 0; i < count; i++) {
          companies.push(userData[i].companies.split(' ')[0]);
          currentYearPlacements.push(userData[i].currentYearPlacements);
          previousYearPlacements.push(userData[i].previousYearPlacements);
        }

        new Chart("barChart", {
          type: "bar",
          data: {
            labels: companies,
            datasets: [
              {
                label: "This Year",
                backgroundColor: "#2167A7",
                data: currentYearPlacements,
              },
              {
                label: "Last Year",
                backgroundColor: "#FF9E5E",
                data: previousYearPlacements,
              },
            ],
          },

          options: {
            scales: {
              yAxes: [
                {
                  ticks: {
                    display: true,
                    beginAtZero: true,
                  },
                },
              ],
            },
          },
        });
      });
  }
</script>

</html>